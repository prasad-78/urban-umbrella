{
	"info": {
		"_postman_id": "67899885-68b2-4940-a00f-0e48052004a3",
		"name": "HF",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Ingredient",
			"item": [
				{
					"name": "Register User For Ingredient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the response has all properties\", () => {",
									"    const responseJson = pm.response.json();",
									"    if(pm.response.status == 200) {",
									"        pm.expect(responseJson.firstName).to.eql(pm.environment.get('firstName'));",
									"        pm.expect(responseJson.lastName).to.eql(pm.environment.get('lastName'));",
									"        pm.expect(responseJson.email).to.eql(pm.environment.get('email'));",
									"    } else if(pm.response.status == 409) {",
									"        pm.expect(responseJson.message).to.equal(\"User Already Exist. Please Login\");",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\":\"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\",\n    \"password\":\"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User For Ingredient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify login should return 200 with token\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set('AccessToken', responseJson.token);",
									"    pm.response.to.have.status(200);",
									"    pm.expect(Object.keys(responseJson).includes('token')).be.true;",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\":\"{{email}}\",\n    \"password\":\"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Ingredients",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify get all for Ingredients\", () => {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingredients/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingredients",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Ingredient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifty creating a new Ingredient should return 201\", () => {",
									"    const response=pm.response.json();",
									"    pm.environment.set('ingredient_id', response._id);",
									"    pm.response.to.have.status(201);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 2,\n    \t\"title\": \"test ingre 1\",\n\t\t\"description\": \"test description\",\n\t\t\"unitOfMeasure\": \"sache\",\n        \"fat\": {\n            \"unitOfMeasure\" : \"milli grams\",\n            \"value\": 100 \n        },\n        \"energyPerUnit\": {\n            \"unitOfMeasure\" : \"KJ\",\n            \"value\": 100 \n        },\n        \"ofWhichSaturates\" : {\n            \"unitOfMeasure\" : \"milli grams\",\n            \"value\": 100 \n        },\n        \"carbohydrate\" : {\n            \"unitOfMeasure\" : \"milli grams\",\n            \"value\": 100 \n        },\n        \"ofWhichSugars\" : {\n            \"unitOfMeasure\" : \"milli grams\",\n            \"value\": 100 \n        },\n        \"dietaryFibre\" : {\n            \"unitOfMeasure\" : \"milli grams\",\n            \"value\": 100 \n        },\n        \"protein\" : {\n            \"unitOfMeasure\" : \"milli grams\",\n            \"value\": 100 \n        },\n        \"cholesterol\" : {\n            \"unitOfMeasure\" : \"milli grams\",\n            \"value\": 100 \n        }, \n        \"sodium\" : {\n            \"unitOfMeasure\" : \"milli grams\",\n            \"value\": 100 \n        }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ingredients/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingredients",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Ingredient by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify Ingredients by Id\", () => {",
									"    const response=pm.response.json();",
									"    pm.response.to.have.status(200);",
									"    pm.expect(response._id).to.eql(pm.environment.get('ingredient_id'))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingredients/{{ingredient_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingredients",
								"{{ingredient_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Ingredient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify Updating a Ingredient by Id\", () => {",
									"    const response=pm.response.json();",
									"    pm.response.to.have.status(200);",
									"    pm.expect(response._id).to.eql(pm.environment.get('ingredient_id'))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \t\"title\": \"test update title 1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ingredients/{{ingredient_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingredients",
								"{{ingredient_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Ingredient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify delete Ingredients by Id\", () => {",
									"    pm.response.to.have.status(204);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingredients/{{ingredient_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingredients",
								"{{ingredient_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Ingredient With Wrong Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify Wrong Post body returns 400\", () => {",
									"    const response=pm.response.json();",
									"    pm.expect(response.status).to.equal(\"ValidationError\")",
									"    pm.response.to.have.status(400);",
									"",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \t\"Title\": \"test title\",\n\t\t\"subTitle\": \"test subtitle\",\n\t\t\"description\": \"test description\",\n\t\t\"preperationTime\": \"35 min\",\n\t\t\"cookingDifficulty\": \"easy\",\n\t\t\"utensils\": \"Dish\",\n\t\t\"tags\": [\"test\", \"test_1\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ingredients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingredients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify delete user with user name and password\", () => {",
									"    pm.response.to.have.status(204);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\":\"{{email}}\",\n    \"password\":\"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/delete",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"delete"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Recipe",
			"item": [
				{
					"name": "Register User For Recipe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the response has all properties\", () => {",
									"    const responseJson = pm.response.json();",
									"    if(pm.response.status == 200) {",
									"        pm.expect(responseJson.firstName).to.eql(pm.environment.get('firstName'));",
									"        pm.expect(responseJson.lastName).to.eql(pm.environment.get('lastName'));",
									"        pm.expect(responseJson.email).to.eql(pm.environment.get('email'));",
									"    } else if(pm.response.status == 409) {",
									"        pm.expect(responseJson.message).to.equal(\"User Already Exist. Please Login\");",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\":\"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\",\n    \"password\":\"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User For Recipe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify login should return 200 with token\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set('AccessToken', responseJson.token);",
									"    pm.response.to.have.status(200);",
									"    pm.expect(Object.keys(responseJson).includes('token')).be.true;",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\":\"{{email}}\",\n    \"password\":\"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Recipes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify get all for Recipes\", () => {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/recipes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post recipe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifty creating a new Recipe should return 201\", () => {",
									"    const response=pm.response.json();",
									"    pm.environment.set('recipe_id', response._id);",
									"    pm.response.to.have.status(201);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \t\"title\": \"test title\",\n\t\t\"subtitle\": \"test subtitle\",\n\t\t\"description\": \"test description\",\n\t\t\"preperationTime\": \"35 min\",\n\t\t\"cookingDifficulty\": \"easy\",\n\t\t\"utensils\": \"Dish\",\n\t\t\"tags\": [\"test\", \"test_1\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/recipes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Recipe by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify Recipe by Id\", () => {",
									"    const response=pm.response.json();",
									"    pm.response.to.have.status(200);",
									"    pm.expect(response._id).to.eql(pm.environment.get('recipe_id'))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/recipes/{{recipe_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recipes",
								"{{recipe_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Recipe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify Updating a Recipe by Id\", () => {",
									"    const response=pm.response.json();",
									"    pm.response.to.have.status(200);",
									"    pm.expect(response._id).to.eql(pm.environment.get('recipe_id'))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \t\"title\": \"test update title\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/recipes/{{recipe_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recipes",
								"{{recipe_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Recipe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify delete Recipe by Id\", () => {",
									"    pm.response.to.have.status(204);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/recipes/{{recipe_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recipes",
								"{{recipe_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post recipe With Wrong Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify Wrong Post body returns 400\", () => {",
									"    const response=pm.response.json();",
									"    pm.expect(response.status).to.equal(\"ValidationError\")",
									"    pm.response.to.have.status(400);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \t\"Title\": \"test title\",\n\t\t\"subTitle\": \"test subtitle\",\n\t\t\"description\": \"test description\",\n\t\t\"preperationTime\": \"35 min\",\n\t\t\"cookingDifficulty\": \"easy\",\n\t\t\"utensils\": \"Dish\",\n\t\t\"tags\": [\"test\", \"test_1\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/recipes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify delete user with user name and password\", () => {",
									"    pm.response.to.have.status(204);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\":\"{{email}}\",\n    \"password\":\"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/delete",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"delete"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "localhost:8080"
		},
		{
			"key": "baseUrl",
			"value": "https://hf-recipe-app.herokuapp.com",
			"type": "string",
			"disabled": true
		}
	]
}